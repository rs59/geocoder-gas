name: Google Apps Script unit tests
on:
  push:
    branches:
      - main
      - develop

env:
  PY_COLORS: "1"

jobs:

  Documentation:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 15
          cache: npm
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10' 
      - run: npm ci # fails due to source issues in google-apps-script. Works with node v12
        continue-on-error: true
      - run: |
          ls; \
          npx typedoc --version; \
          cp ./tsconfig_tsdoc.json tsconfig.json; \
          npx typedoc --out docs --entryPoints src/geocoder_library.ts --name "geocoder-gas"; # potentially npx rimraf temp-docs && npx typedoc --plugin typedoc-plugin-markdown --theme markdown --out temp-docs  --entryPoints src/geocoder_library.ts --name "geocoder-gas" && npx concat-md --toc --decrease-title-levels --dir-name-as-title temp-docs > README.md && npx showdown makehtml -i README.md -o README.html && npx rimraf temp-docs after npm install -D typedoc typedoc-plugin-markdown concat-md rimraf showdown
      - name: Archive production documentation
        uses: actions/upload-artifact@v3
        with:
          name: docs
          path: |
            docs

  Deploy-AppsScript:
    runs-on: ubuntu-latest
    environment: deployNov
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 12
          cache: npm
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10' 
      - run: npm ci
      - if: ${{ endsWith(github.ref, 'main') }}
        run: ./prepare.sh prd
      - if: ${{ endsWith(github.ref, 'develop') }}
        run: ./prepare.sh dev
      - name: Linting
        run: echo npm run lint
      - run: |
          gpg \
            --quiet --batch --yes --decrypt --passphrase="${{ secrets.CLASP_SECRET }}" \
            --output $HOME/.clasprc.json .clasprc-global.json.gpg # global clasp login
      - run: npx clasp push -f
      - name: Get more privileged GAS token
        if: ${{ endsWith(github.ref, 'develop') }}
        run: |
          gpg \
            --quiet --batch --yes --decrypt --passphrase="${{ secrets.CLASP_SECRET_2 }}" \
            --output .clasprc.json .clasprc-dev-run.json.gpg # local clasp login (allows clasp run to get unit test results)
      - name: Launch development testing suite (QUnit2)
        if: ${{ endsWith(github.ref, 'develop') }}
        run: npx clasp run launch # launch function simulates doGet (loading the QUnit2 webpage)
      - name: Get QUnit2 test results
        if: ${{ endsWith(github.ref, 'develop') }}
        run: |
          results=$(npx clasp run getResultsFromServer); \
          stripped_output=$(echo "$results" | sed -n '/\[/,$p'); \
          echo "\n\n\n"; echo $stripped_output; \
          echo "$stripped_output" > ./testmanager/testoutput.json
      - name: Output QUnit2 results in organized format
        if: ${{ endsWith(github.ref, 'develop') }}
        run: python ./testmanager/testmanager.py ./testmanager/testoutput.json # translate the results json into organized test output
      - name: Deploy application and present deployment links in organized format (dev)
        if: ${{ endsWith(github.ref, 'develop') }}
        run: |
          commit=$(git rev-parse HEAD); \
          deployment="$(npx clasp deploy --description ${commit:0:8})"; \
          echo "$deployment"
          get_second_to_last_word() { words=($1); echo ${words[$((${#words[@]} - 2))]} ; }; \
          echo "dev deployment at https://script.google.com/macros/s/$(get_second_to_last_word "$deployment")/exec"; \
          echo "unit tests at https://script.google.com/macros/s/$(get_second_to_last_word "$deployment")/exec?page=tests"; \
      - name: Deploy application and present deployment links in organized format (prod)
        if: ${{ endsWith(github.ref, 'main') }}
        run: |
          deployment="$(npx clasp deploy --deploymentId ${{vars.PROD_URL}})"; # may want to run npx clasp undeploy --all from time to time \
          get_second_to_last_word() { words=($1); echo ${words[$((${#words[@]} - 2))]} ; }; \
          echo "prod deployment at https://script.google.com/macros/s/$(get_second_to_last_word "$deployment")/exec";
      

          
